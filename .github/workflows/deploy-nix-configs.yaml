name: "🚀 Deploy"

# Solo se ejecuta cuando se hace push a main o manualmente
on:
  push:
    branches: [main]
  workflow_dispatch:

# Configuración de permisos
permissions:
  contents: read
  deployments: write
  statuses: write
  pull-requests: write

jobs:
  deploy:
    name: "🚀 Deploy Configuration"
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: "🔽 Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "⬇️ Install Nix"
        uses: DeterminateSystems/nix-installer-action@v9
        with:
          extra-conf: |
            experimental-features = nix-command flakes
            warn-dirty = false

      - name: "🔒 Setup Git User"
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: "🔍 Check for changes"
        id: changes
        run: |
          # Verificar si hay cambios en los archivos de configuración
          CHANGES=$(git diff --name-only origin/main HEAD -- '*.nix' '*.yaml' '*.sh' || true)
          if [ -z "$CHANGES" ]; then
            echo "No changes detected in configuration files, skipping deployment"
            echo "deploy_needed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected, proceeding with deployment"
            echo "deploy_needed=true" >> $GITHUB_OUTPUT
          fi

      - name: "🚀 Start Deployment"
        if: steps.changes.outputs.deploy_needed == 'true'
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: production
          ref: ${{ github.sha }}

      - name: "🏗️ Build and Deploy"
        id: deploy
        if: steps.changes.outputs.deploy_needed == 'true'
        run: |
          set -euo pipefail
          
          echo "🚀 Starting deployment..."
          
          # Determine system type (simplified example - adjust as needed)
          if [ -f /etc/NIXOS ]; then
            TARGET="nixos"
            DEPLOY_CMD="nixos-rebuild switch --flake .#$(hostname)"
          else
            TARGET="darwin"
            DEPLOY_CMD="darwin-rebuild switch --flake .#$(hostname -s)"
          fi
          
          echo "🔧 Target system: $TARGET"
          echo "🚀 Executing: $DEPLOY_CMD"
          
          # Store target system for rollback if needed
          echo "TARGET_SYSTEM=$TARGET" >> $GITHUB_ENV
          
          # Execute deployment
          if ! $DEPLOY_CMD; then
            echo "❌ Deployment failed"
            exit 1
          fi
          
          echo "✅ Deployment completed successfully"

      - name: "🔄 Handle Rollback if Needed"
        if: failure() && steps.deploy.outcome == 'failure' && steps.changes.outputs.deploy_needed == 'true'
        run: |
          echo "⚠️ Deployment failed, attempting rollback..."
          
          # Make script executable
          chmod +x .github/scripts/system-rollback.sh
          
          # Execute rollback
          if ! ./.github/scripts/system-rollback.sh --target ${{ env.TARGET_SYSTEM }}; then
            echo "❌ Rollback failed"
            # Send notification about failed rollback
            if [ -f ".github/scripts/send-matrix-notification.sh" ]; then
              ./.github/scripts/send-matrix-notification.sh \
                --homeserver "${{ secrets.MATRIX_HOMESERVER }}" \
                --token "${{ secrets.MATRIX_ACCESS_TOKEN }}" \
                --room "${{ secrets.MATRIX_ROOM_ID }}" \
                --message "🚨 Critical: Deployment failed and rollback was unsuccessful on $(hostname)"
            fi
            exit 1
          fi
          
          echo "✅ Rollback completed successfully"
          
          # Send success notification
          if [ -f ".github/scripts/send-matrix-notification.sh" ]; then
            ./.github/scripts/send-matrix-notification.sh \
              --homeserver "${{ secrets.MATRIX_HOMESERVER }}" \
              --token "${{ secrets.MATRIX_ACCESS_TOKEN }}" \
              --room "${{ secrets.MATRIX_ROOM_ID }}" \
              --message "🔄 System rolled back to previous generation on $(hostname) after failed deployment"
          fi
          
      - name: "✅ Finish Deployment"
        if: always()
        uses: bobheadxi/deployments@v1
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env: production
          deployment_id: ${{ steps.deployment.outputs.deployment_id || format('deploy-{0}', github.run_id )}}
          desc: "Deployment ${{ job.status }}"

      - name: "📊 Generate Deployment Report"
        if: always()
        run: |
          mkdir -p ${{ github.workspace }}/reports
          REPORT_PATH="${{ github.workspace }}/reports/deploy-report.md"
          
          echo "# 🚀 Deployment Report" > "$REPORT_PATH"
          echo "## 📅 $(date)" >> "$REPORT_PATH"
          echo "### 🔄 Changes" >> "$REPORT_PATH"
          
          if [ "${{ steps.changes.outputs.deploy_needed }}" = "true" ]; then
            echo "✅ Configuration changes detected and deployed" >> "$REPORT_PATH"
            echo "\n### 📋 Changed Files" >> "$REPORT_PATH"
            git diff --name-only HEAD^ HEAD -- '*.nix' '*.yaml' '*.sh' | sed 's/^/- /' >> "$REPORT_PATH"
          else
            echo "ℹ️ No configuration changes detected, deployment skipped" >> "$REPORT_PATH"
          fi
          
          echo "\n### 🔍 Build Info" >> "$REPORT_PATH"
          echo "- Nix Version: $(nix --version)" >> "$REPORT_PATH"
          echo "- Run URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> "$REPORT_PATH"

      - name: "📤 Upload Deployment Report"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deploy-report
          path: ${{ github.workspace }}/reports/deploy-report.md
          retention-days: 7
